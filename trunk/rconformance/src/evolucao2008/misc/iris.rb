#!/usr/bin/env jruby

require 'java'

#
#@RELATION iris
#
#@ATTRIBUTE sepallength	REAL
#@ATTRIBUTE sepalwidth 	REAL
#@ATTRIBUTE petallength 	REAL
#@ATTRIBUTE petalwidth	REAL
#@ATTRIBUTE class 	{Iris-setosa,Iris-versicolor,Iris-virginica}
#
#@DATA

require 'RAgglomerativeClusterer.rb'

$labels = (1..50).map{|i| "setosa#{i}"} + (1..50).map{|i| "versicolor#{i}"} +
    (1..50).map{|i| "virginica#{i}"}

$table =
[
#setosa
[5.1,3.5,1.4,0.2],
[4.9,3.0,1.4,0.2],
[4.7,3.2,1.3,0.2],
[4.6,3.1,1.5,0.2],
[5.0,3.6,1.4,0.2],
[5.4,3.9,1.7,0.4],
[4.6,3.4,1.4,0.3],
[5.0,3.4,1.5,0.2],
[4.4,2.9,1.4,0.2],
[4.9,3.1,1.5,0.1],
[5.4,3.7,1.5,0.2],
[4.8,3.4,1.6,0.2],
[4.8,3.0,1.4,0.1],
[4.3,3.0,1.1,0.1],
[5.8,4.0,1.2,0.2],
[5.7,4.4,1.5,0.4],
[5.4,3.9,1.3,0.4],
[5.1,3.5,1.4,0.3],
[5.7,3.8,1.7,0.3],
[5.1,3.8,1.5,0.3],
[5.4,3.4,1.7,0.2],
[5.1,3.7,1.5,0.4],
[4.6,3.6,1.0,0.2],
[5.1,3.3,1.7,0.5],
[4.8,3.4,1.9,0.2],
[5.0,3.0,1.6,0.2],
[5.0,3.4,1.6,0.4],
[5.2,3.5,1.5,0.2],
[5.2,3.4,1.4,0.2],
[4.7,3.2,1.6,0.2],
[4.8,3.1,1.6,0.2],
[5.4,3.4,1.5,0.4],
[5.2,4.1,1.5,0.1],
[5.5,4.2,1.4,0.2],
[4.9,3.1,1.5,0.1],
[5.0,3.2,1.2,0.2],
[5.5,3.5,1.3,0.2],
[4.9,3.1,1.5,0.1],
[4.4,3.0,1.3,0.2],
[5.1,3.4,1.5,0.2],
[5.0,3.5,1.3,0.3],
[4.5,2.3,1.3,0.3],
[4.4,3.2,1.3,0.2],
[5.0,3.5,1.6,0.6],
[5.1,3.8,1.9,0.4],
[4.8,3.0,1.4,0.3],
[5.1,3.8,1.6,0.2],
[4.6,3.2,1.4,0.2],
[5.3,3.7,1.5,0.2],
[5.0,3.3,1.4,0.2],
# versicolor
[7.0,3.2,4.7,1.4],
[6.4,3.2,4.5,1.5],
[6.9,3.1,4.9,1.5],
[5.5,2.3,4.0,1.3],
[6.5,2.8,4.6,1.5],
[5.7,2.8,4.5,1.3],
[6.3,3.3,4.7,1.6],
[4.9,2.4,3.3,1.0],
[6.6,2.9,4.6,1.3],
[5.2,2.7,3.9,1.4],
[5.0,2.0,3.5,1.0],
[5.9,3.0,4.2,1.5],
[6.0,2.2,4.0,1.0],
[6.1,2.9,4.7,1.4],
[5.6,2.9,3.6,1.3],
[6.7,3.1,4.4,1.4],
[5.6,3.0,4.5,1.5],
[5.8,2.7,4.1,1.0],
[6.2,2.2,4.5,1.5],
[5.6,2.5,3.9,1.1],
[5.9,3.2,4.8,1.8],
[6.1,2.8,4.0,1.3],
[6.3,2.5,4.9,1.5],
[6.1,2.8,4.7,1.2],
[6.4,2.9,4.3,1.3],
[6.6,3.0,4.4,1.4],
[6.8,2.8,4.8,1.4],
[6.7,3.0,5.0,1.7],
[6.0,2.9,4.5,1.5],
[5.7,2.6,3.5,1.0],
[5.5,2.4,3.8,1.1],
[5.5,2.4,3.7,1.0],
[5.8,2.7,3.9,1.2],
[6.0,2.7,5.1,1.6],
[5.4,3.0,4.5,1.5],
[6.0,3.4,4.5,1.6],
[6.7,3.1,4.7,1.5],
[6.3,2.3,4.4,1.3],
[5.6,3.0,4.1,1.3],
[5.5,2.5,4.0,1.3],
[5.5,2.6,4.4,1.2],
[6.1,3.0,4.6,1.4],
[5.8,2.6,4.0,1.2],
[5.0,2.3,3.3,1.0],
[5.6,2.7,4.2,1.3],
[5.7,3.0,4.2,1.2],
[5.7,2.9,4.2,1.3],
[6.2,2.9,4.3,1.3],
[5.1,2.5,3.0,1.1],
[5.7,2.8,4.1,1.3],
#virginica
[6.3,3.3,6.0,2.5],
[5.8,2.7,5.1,1.9],
[7.1,3.0,5.9,2.1],
[6.3,2.9,5.6,1.8],
[6.5,3.0,5.8,2.2],
[7.6,3.0,6.6,2.1],
[4.9,2.5,4.5,1.7],
[7.3,2.9,6.3,1.8],
[6.7,2.5,5.8,1.8],
[7.2,3.6,6.1,2.5],
[6.5,3.2,5.1,2.0],
[6.4,2.7,5.3,1.9],
[6.8,3.0,5.5,2.1],
[5.7,2.5,5.0,2.0],
[5.8,2.8,5.1,2.4],
[6.4,3.2,5.3,2.3],
[6.5,3.0,5.5,1.8],
[7.7,3.8,6.7,2.2],
[7.7,2.6,6.9,2.3],
[6.0,2.2,5.0,1.5],
[6.9,3.2,5.7,2.3],
[5.6,2.8,4.9,2.0],
[7.7,2.8,6.7,2.0],
[6.3,2.7,4.9,1.8],
[6.7,3.3,5.7,2.1],
[7.2,3.2,6.0,1.8],
[6.2,2.8,4.8,1.8],
[6.1,3.0,4.9,1.8],
[6.4,2.8,5.6,2.1],
[7.2,3.0,5.8,1.6],
[7.4,2.8,6.1,1.9],
[7.9,3.8,6.4,2.0],
[6.4,2.8,5.6,2.2],
[6.3,2.8,5.1,1.5],
[6.1,2.6,5.6,1.4],
[7.7,3.0,6.1,2.3],
[6.3,3.4,5.6,2.4],
[6.4,3.1,5.5,1.8],
[6.0,3.0,4.8,1.8],
[6.9,3.1,5.4,2.1],
[6.7,3.1,5.6,2.4],
[6.9,3.1,5.1,2.3],
[5.8,2.7,5.1,1.9],
[6.8,3.2,5.9,2.3],
[6.7,3.3,5.7,2.5],
[6.7,3.0,5.2,2.3],
[6.3,2.5,5.0,1.9],
[6.5,3.0,5.2,2.0],
[6.2,3.4,5.4,2.3],
[5.9,3.0,5.1,1.8]
]

simtable = []

def distance(v1, v2)
  difference_2 = v1.zip(v2).map { |x, y| (x - y)**2 }
  distance = Math.sqrt(difference_2.inject(0){|acc, x| acc + x})
  return distance
end

#def similarity(label1, label2)
#def similarity(i, j)
#  #i, j = $labels.index(label1), $labels.index(label2)
#  return 1.0 / distance($table[i], $table[j])
#end

#agg = RAgglomerativeClusterer.new((0..149).to_a, lambda {|x,y| similarity(x,y)})

import 'abstractor.cluster.hierarchical.DerivedAgglomerativeClusterer'
import 'abstractor.cluster.hierarchical.AgglomerativeClusterer'
import 'abstractor.cluster.hierarchical.CompleteLinkage'
import 'abstractor.cluster.hierarchical.TableSimilarity'
import 'abstractor.cluster.hierarchical.Similarity'

require 'view_matrix'
require 'view_clusters'
#
#N = $table.size
#sim_table = Array.new(N) { |i| Array.new(N) { |j| distance($table[i], $table[j]) }}
#maximum = sim_table.flatten.max
#sim_table.each { |v| v.map!{ |x| (maximum - x) / maximum }}
#
#sim = TableSimilarity.new sim_table.to_java(Java::double[])
#sim = CompleteLinkage.new(sim)
#agg = AgglomerativeClusterer.new(N, sim)
#clusters_java = agg.getClusters(0.16)
#clusters = []
#clusters_java.each do |vector|
#  clusters << vector.to_a
#end
#p clusters

#clusters.each do |c|
#  p c.map{|x| $labels[x]}
#  puts "--------------------"
#end

clusters = [[107, 130, 102, 125, 129, 118, 105, 122, 117, 131, 109, 135], [140, 144, 124, 120, 143, 100, 136, 148, 115, 110, 147, 112, 139, 141, 145, 108, 103, 116, 137, 104, 128, 132, 149, 70, 127, 138, 114, 121, 113, 101, 142, 134, 111, 146, 123, 126, 72, 83, 133, 119, 68, 87, 65, 75, 76, 54, 58, 77, 86, 50, 52, 85, 51, 56, 74, 97, 73, 78, 63, 91], [60, 98, 57, 93, 106, 66, 84, 55, 90, 61, 71, 67, 82, 92, 88, 95, 96, 94, 99, 62, 59, 53, 89, 64, 79, 69, 80, 81], [41, 35, 0, 17, 27, 28, 4, 40, 49, 7, 39, 6, 11, 29, 30, 25, 45, 37, 9, 34, 1, 12, 22, 42, 2, 3, 47, 13, 8, 38, 16, 32, 33, 14, 15, 5, 18, 20, 31, 36, 10, 48, 44, 46, 19, 21, 24, 43, 23, 26]]

sim_table = eval(IO.read("iris_sim.data"))

require 'matrix'

view_matrix2 Matrix[*sim_table]
sort_matrix!(sim_table, clusters)
view_matrix2 Matrix[*sim_table]

