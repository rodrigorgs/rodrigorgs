== Algoritmo de aglomeração baseado em centros fornecidos pelo usuário ==

O usuário escolhe alguns nós que serão os centros dos clusters.

Inicialmente, cada centro está em um cluster que contém apenas ele próprio e
os demais nós não estão em nenhum cluster.

O algoritmo calcula a distância d(x, y) para cada x que for centro.

Loop:
  Seja (c, d) tal que c é centro, d não está em nenhum cluster e  d(c, d) é
  mínima.
  Adiciona d ao cluster de c.
  Repete até todos os nós estarem em algum cluster (ou então repete até que
  a menor distância seja muito grande)

Rodrigo Rocha, 2 de setembro de 2008

== Métrica de distância baseada em similaridade textual ==

A idéia dessa métrica é extrair informação a partir de documentação de classes
(ex.: javadoc).

Para cada classe C é calculada a similaridade textual de sua documentação com
a documentação de todas as outras classes, conforme explicado no arquivo sobre
a ferramenta SNIAFL (usando Information Retrieval).

Rodrigo Rocha, 2 de setembro de 2008

== Métrica de distância baseada em uso (co-uso) ==

Métrica mais adequada para bibliotecas.
Apelido: "quem usa X também usa Y".

Para cada elemento E de um programa, verifica todos os elementos U que usam
o elemento E. O espaço de busca inclui o próprio programa sob análise, outros
programas indicados pelo usuário e programas indexados por serviços como
Google Code Search, Koders e Krugle.

Seja {E1, E2, ..., En} o conjunto de elementos que Ui usa (necessariamente E
pertence a este conjunto). A distância d(E, Ej) é então definida como a
confiança da regra de associação E => Ej.

Fica em aberto o que caracteriza o uso de uma entidade por outra. Esse tipo
de informação pode ser obtida por análise estática, análise dinâmica ou mesmo
análise histórica (nesse caso, uma entidade usuária seria um par 
<desenvolvedor, commit> e as entidades usadas seriam as entidades commitadas).

Rodrigo Rocha, 2 de setembro de 2008


------------------------
Proposta de projeto para a disciplina Evolução de Software

== Introdução == / Motivação

A arquitetura de um sistema pode ser apresentada sob diversos pontos de vista.
Uma descrição arquitetural representa uma visão do sistema que é endereça
alguma preocupação de um stakeholder [4+1].

No contexto de evolução de software é especialmente importante lidar com a
compreensão de software, de interesse principalmente para desenvolvedores que
precisam alterar o software. Diversas soluções para essa preocupação involvem
agrupar entidades de código relacionadas em conjuntos (clusters), a fim de
facilitar o entendimento e o raciocínio sobre o software.

== Objetivo ==

Este trabalho tem como objetivo avaliar o papel de duas métricas de distância
entre entidades de código no contexto de compreensão de software.

== Metodologia ==

Implementação das métricas.

Estudo de algoritmos de particionamento a fim de identificar um algoritmo que
tenha como entrada uma função de distância entre entidades.

Escolha de dois softwares para análise.

Serão escolhidos dois programas cujo funcionamento o autor compreenda.
Para cada métrica M:
- O projeto P1 será particionado de acordo com a métrica M.
- As partições serão analisadas a fim de se conceber descrições intuitivas
que se apliquem a todos os elementos de uma partição, para todas as partições.
- O projeto P2 será então particionado usando a mesma métrica.
- Analisar-se-á quais descrições intuitivas se aplicam ao projeto 2.

Da mesma forma, será feito um estudo comparativo dos particionamentos gerados
por cada uma das métricas. A comparação será feita manualmente a fim de
adquirir uma intuição sobre o papel de cada métrica, mas também serão usados
algoritmos de comparação de particionamento, como o MoJo Distance.

== Referências ==

...
